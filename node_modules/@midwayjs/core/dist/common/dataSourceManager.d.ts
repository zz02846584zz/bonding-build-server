export declare abstract class DataSourceManager<T> {
    protected dataSource: Map<string, T>;
    protected options: {};
    protected modelMapping: WeakMap<object, any>;
    private innerDefaultDataSourceName;
    protected initDataSource(options: any, appDir: string): Promise<void>;
    /**
     * get a data source instance
     * @param dataSourceName
     */
    getDataSource(dataSourceName: string): T;
    /**
     * check data source has exists
     * @param dataSourceName
     */
    hasDataSource(dataSourceName: string): boolean;
    getDataSourceNames(): string[];
    /**
     * check the data source is connected
     * @param dataSourceName
     */
    isConnected(dataSourceName: string): Promise<boolean>;
    createInstance(config: any, clientName: any, options?: CreateDataSourceInstanceOptions): Promise<T | void>;
    /**
     * get data source name by model or repository
     * @param modelOrRepository
     */
    getDataSourceNameByModel(modelOrRepository: any): string | undefined;
    abstract getName(): string;
    protected abstract createDataSource(config: any, dataSourceName: string): Promise<T | void> | (T | void);
    protected abstract checkConnected(dataSource: T): Promise<boolean>;
    protected abstract destroyDataSource(dataSource: T): Promise<void>;
    stop(): Promise<void>;
    getDefaultDataSourceName(): string;
}
export declare function globModels(globString: string, appDir: string): any[];
export interface CreateDataSourceInstanceOptions {
    /**
     * @default false
     */
    validateConnection?: boolean;
    /**
     * @default true
     */
    cacheInstance?: boolean | undefined;
}
//# sourceMappingURL=dataSourceManager.d.ts.map