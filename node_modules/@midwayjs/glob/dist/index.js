"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const pm = require("picomatch");
const util_1 = require("util");
const os = require("os");
const log = (0, util_1.debuglog)('midway:glob');
function formatWindowsPath(paths) {
    if (os.platform() === 'win32' && paths) {
        return paths.map(p => p.split(path_1.sep).join(path_1.posix.sep));
    }
    return paths;
}
const run = (pattern, options = { cwd: process.cwd(), ignore: [] }) => {
    const startTime = Date.now();
    const entryDir = options.cwd;
    pattern = formatWindowsPath(pattern) || [];
    const isMatch = pm(pattern, {
        ignore: formatWindowsPath(options.ignore) || []
    });
    const ignoreMatch = pm('**', {
        ignore: formatWindowsPath(options.ignore) || []
    });
    function globDirectory(dirname, isMatch, ignoreDirMatch, options) {
        if (!(0, fs_1.existsSync)(dirname)) {
            return [];
        }
        const list = (0, fs_1.readdirSync)(dirname);
        const result = [];
        for (let file of list) {
            const resolvePath = (0, path_1.resolve)(dirname, file);
            log(`resolvePath = ${resolvePath}`);
            const fileStat = (0, fs_1.statSync)(resolvePath);
            if (fileStat.isDirectory() && ignoreDirMatch(resolvePath.replace(entryDir, ''))) {
                const childs = globDirectory(resolvePath, isMatch, ignoreDirMatch, options);
                result.push(...childs);
            }
            else if (fileStat.isFile() && isMatch(resolvePath.replace(entryDir, ''))) {
                result.push(resolvePath);
            }
        }
        return result;
    }
    const result = globDirectory(entryDir, isMatch, ignoreMatch, options);
    log(`midway glob timing ${Date.now() - startTime}ms`);
    return result;
};
exports.run = run;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkJBQXVEO0FBQ3ZELCtCQUEyQztBQUMzQyxnQ0FBZ0M7QUFDaEMsK0JBQWdDO0FBQ2hDLHlCQUF5QjtBQUV6QixNQUFNLEdBQUcsR0FBRyxJQUFBLGVBQVEsRUFBQyxhQUFhLENBQUMsQ0FBQztBQUVwQyxTQUFTLGlCQUFpQixDQUFDLEtBQWdCO0lBQ3pDLElBQUksRUFBRSxDQUFDLFFBQVEsRUFBRSxLQUFLLE9BQU8sSUFBSSxLQUFLLEVBQUU7UUFDdEMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDckQ7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFPTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE9BQWlCLEVBQUUsVUFBc0IsRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO0lBQ2pHLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUM3QixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQzdCLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0MsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRTtRQUMxQixNQUFNLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7S0FDaEQsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRTtRQUMzQixNQUFNLEVBQUUsaUJBQWlCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUU7S0FDaEQsQ0FBQyxDQUFBO0lBRUYsU0FBUyxhQUFhLENBQUMsT0FBZSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsT0FBUTtRQUN2RSxJQUFJLENBQUMsSUFBQSxlQUFVLEVBQUMsT0FBTyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sSUFBSSxHQUFHLElBQUEsZ0JBQVcsRUFBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFFbEIsS0FBSyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7WUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBQSxjQUFPLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxpQkFBaUIsV0FBVyxFQUFFLENBQUMsQ0FBQztZQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFBLGFBQVEsRUFBQyxXQUFXLENBQUMsQ0FBQztZQUN2QyxJQUFJLFFBQVEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDL0UsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUM1RSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUM7YUFDeEI7aUJBQU0sSUFBRyxRQUFRLENBQUMsTUFBTSxFQUFFLElBQUksT0FBTyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3pFLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7YUFDMUI7U0FDRjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEUsR0FBRyxDQUFDLHNCQUFzQixJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxJQUFJLENBQUMsQ0FBQztJQUN0RCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUE7QUFwQ1ksUUFBQSxHQUFHLE9Bb0NmIn0=