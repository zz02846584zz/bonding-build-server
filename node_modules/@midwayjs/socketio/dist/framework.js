"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MidwaySocketIOFramework = void 0;
const core_1 = require("@midwayjs/core");
const util_1 = require("util");
const debug = (0, util_1.debuglog)('midway:socket.io');
const socket_io_1 = require("socket.io");
const core_2 = require("@midwayjs/core");
let MidwaySocketIOFramework = class MidwaySocketIOFramework extends core_1.BaseFramework {
    constructor() {
        super(...arguments);
        this.namespaceList = [];
        this.connectionMiddlewareManager = this.createMiddlewareManager();
    }
    configure() {
        return this.configService.getConfiguration('socketIO');
    }
    applicationInitialize() {
        this.app = new socket_io_1.Server(this.configurationOptions);
        this.defineApplicationProperties({
            useConnectionMiddleware: (middleware) => {
                return this.useConnectionMiddleware(middleware);
            },
            getConnectionMiddleware: () => {
                return this.getConnectionMiddleware();
            },
        });
    }
    async run() {
        await this.loadMidwayController();
        if (this.configurationOptions.adapter) {
            this.app.adapter(this.configurationOptions.adapter);
            this.logger.debug('[midway:socketio] init socket.io-redis ready!');
        }
        // listen port when http server not exist
        if (this.configurationOptions.port) {
            this.app.listen(this.configurationOptions.port, this.configurationOptions);
            this.logger.info(`[midway:socketio] Socket.io server port = ${this.configurationOptions.port} start success`);
        }
        else if (this.applicationContext.hasObject(core_1.HTTP_SERVER_KEY)) {
            this.app.attach(this.applicationContext.get(core_1.HTTP_SERVER_KEY), this.configurationOptions);
            this.logger.info('[midway:socketio] Socket.io server start success and attach to web server');
        }
    }
    async beforeStop() {
        return new Promise(resolve => {
            this.app.close(() => {
                setTimeout(() => {
                    resolve();
                }, 1000);
            });
        });
    }
    getFrameworkType() {
        return core_1.MidwayFrameworkType.WS_IO;
    }
    async loadMidwayController() {
        // create room
        const controllerModules = (0, core_2.listModule)(core_2.WS_CONTROLLER_KEY);
        for (const module of controllerModules) {
            await this.addNamespace(module);
        }
    }
    async addNamespace(target) {
        var _a, _b;
        const controllerOption = (0, core_2.getClassMetadata)(core_2.WS_CONTROLLER_KEY, target);
        const nsp = this.app.of(controllerOption.namespace);
        this.namespaceList.push(controllerOption.namespace);
        const controllerMiddleware = (_a = controllerOption.routerOptions.middleware) !== null && _a !== void 0 ? _a : [];
        const controllerConnectionMiddleware = (_b = controllerOption.routerOptions.connectionMiddleware) !== null && _b !== void 0 ? _b : [];
        nsp.use((socket, next) => {
            this.app.createAnonymousContext(socket);
            socket.requestContext.registerObject('socket', socket);
            socket.app = this.app;
            next();
        });
        nsp.on('connect', async (socket) => {
            var _a;
            // run connection middleware
            const connectFn = await this.middlewareService.compose([
                ...this.connectionMiddlewareManager,
                ...controllerConnectionMiddleware,
            ], this.app);
            await connectFn(socket);
            const wsEventInfos = (0, core_2.getClassMetadata)(core_2.WS_EVENT_KEY, target);
            // 存储方法对应的响应处理
            const methodMap = {};
            if (wsEventInfos.length) {
                for (const wsEventInfo of wsEventInfos) {
                    methodMap[wsEventInfo.propertyName] = methodMap[wsEventInfo.propertyName] || { responseEvents: [] };
                    const controller = await socket.requestContext.getAsync(target);
                    // on connection
                    if (wsEventInfo.eventType === core_2.WSEventTypeEnum.ON_CONNECTION) {
                        try {
                            const fn = await this.middlewareService.compose([
                                ...(((_a = wsEventInfo === null || wsEventInfo === void 0 ? void 0 : wsEventInfo.eventOptions) === null || _a === void 0 ? void 0 : _a.middleware) || []),
                                async (ctx, next) => {
                                    // eslint-disable-next-line prefer-spread
                                    return controller[wsEventInfo.propertyName].apply(controller, [socket]);
                                },
                            ], this.app);
                            const result = await fn(socket);
                            await this.bindSocketResponse(result, socket, wsEventInfo.propertyName, methodMap);
                        }
                        catch (err) {
                            this.logger.error(err);
                        }
                    }
                    else if (wsEventInfo.eventType === core_2.WSEventTypeEnum.ON_MESSAGE) {
                        // on user custom event
                        socket.on(wsEventInfo.messageEventName, async (...args) => {
                            debug('got message', wsEventInfo.messageEventName, args);
                            try {
                                const result = await (await this.applyMiddleware(async (ctx, next) => {
                                    var _a;
                                    // add controller middleware
                                    const fn = await this.middlewareService.compose([
                                        ...controllerMiddleware,
                                        ...(((_a = wsEventInfo === null || wsEventInfo === void 0 ? void 0 : wsEventInfo.eventOptions) === null || _a === void 0 ? void 0 : _a.middleware) || []),
                                        async (ctx, next) => {
                                            const isPassed = await this.app
                                                .getFramework()
                                                .runGuard(ctx, target, wsEventInfo.propertyName);
                                            if (!isPassed) {
                                                throw new core_1.MidwayInvokeForbiddenError(wsEventInfo.propertyName, target);
                                            }
                                            // eslint-disable-next-line prefer-spread
                                            return controller[wsEventInfo.propertyName].apply(controller, args);
                                        },
                                    ], this.app);
                                    return await fn(ctx, next);
                                }))(socket);
                                if (typeof args[args.length - 1] === 'function') {
                                    // ack
                                    args[args.length - 1](result);
                                }
                                else {
                                    // emit
                                    await this.bindSocketResponse(result, socket, wsEventInfo.propertyName, methodMap);
                                }
                            }
                            catch (error) {
                                this.logger.error(error);
                            }
                        });
                    }
                    else if (wsEventInfo.eventType === core_2.WSEventTypeEnum.ON_DISCONNECTION) {
                        // on socket disconnect
                        socket.on('disconnect', async (reason) => {
                            try {
                                const result = await controller[wsEventInfo.propertyName].apply(controller, [reason]);
                                await this.bindSocketResponse(result, socket, wsEventInfo.propertyName, methodMap);
                            }
                            catch (err) {
                                this.logger.error(err);
                            }
                        });
                    }
                    else {
                        // 存储每个方法对应的后置响应处理，供后续快速匹配
                        methodMap[wsEventInfo.propertyName].responseEvents.push(wsEventInfo);
                    }
                }
            }
        });
        if (nsp.adapter) {
            nsp.adapter.on('error', err => {
                this.logger.error(err);
            });
        }
    }
    async bindSocketResponse(result, socket, propertyName, methodMap) {
        if (result && methodMap[propertyName]) {
            for (const wsEventInfo of methodMap[propertyName].responseEvents) {
                if (wsEventInfo.eventType === core_2.WSEventTypeEnum.EMIT) {
                    if (wsEventInfo.roomName.length) {
                        socket = wsEventInfo.roomName.reduce((socket, name) => {
                            return socket.to(name);
                        }, socket);
                    }
                    // eslint-disable-next-line prefer-spread
                    socket.emit.apply(socket, [wsEventInfo.messageEventName].concat(result));
                }
                else if (wsEventInfo.eventType === core_2.WSEventTypeEnum.BROADCAST) {
                    // eslint-disable-next-line prefer-spread
                    socket.nsp.emit.apply(socket.nsp, [].concat(result));
                }
            }
        }
    }
    getFrameworkName() {
        return 'midway:socketIO';
    }
    useConnectionMiddleware(middleware) {
        this.connectionMiddlewareManager.insertLast(middleware);
    }
    getConnectionMiddleware() {
        return this.connectionMiddlewareManager;
    }
};
MidwaySocketIOFramework = __decorate([
    (0, core_2.Framework)()
], MidwaySocketIOFramework);
exports.MidwaySocketIOFramework = MidwaySocketIOFramework;
//# sourceMappingURL=framework.js.map