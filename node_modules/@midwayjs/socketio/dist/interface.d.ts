import * as SocketIO from 'socket.io';
import { CommonMiddlewareUnion, ContextMiddlewareManager, IConfigurationOptions, IMidwayApplication, IMidwayContext, NextFunction as BaseNextFunction } from '@midwayjs/core';
export declare type Application = IMidwayApplication<Context, {
    use(fn: (socket: Context, fn: (err?: any) => void) => void): SocketIO.Namespace;
    useConnectionMiddleware: (middleware: CommonMiddlewareUnion<Context, NextFunction, undefined>) => void;
    getConnectionMiddleware: ContextMiddlewareManager<Context, NextFunction, undefined>;
} & SocketIO.Server>;
export declare type IMidwaySocketIOOptions = {
    port?: number;
    pubClient?: any;
    subClient?: any;
} & Partial<SocketIO.ServerOptions> & IConfigurationOptions;
export declare type Context = IMidwayContext<SocketIO.Socket & {
    app: Application;
}>;
export declare type NextFunction = BaseNextFunction;
declare module '@midwayjs/core/dist/interface' {
    interface MidwayConfig {
        socketIO?: IMidwaySocketIOOptions;
    }
}
//# sourceMappingURL=interface.d.ts.map