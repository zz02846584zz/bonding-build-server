import { BaseFramework, CommonMiddlewareUnion, ContextMiddlewareManager, MidwayFrameworkType } from '@midwayjs/core';
import { Application, IMidwaySocketIOOptions, Context, NextFunction } from './interface';
export declare class MidwaySocketIOFramework extends BaseFramework<Application, Context, IMidwaySocketIOOptions> {
    private namespaceList;
    app: Application;
    protected connectionMiddlewareManager: ContextMiddlewareManager<Context, unknown, unknown>;
    configure(): IMidwaySocketIOOptions;
    applicationInitialize(): void;
    run(): Promise<void>;
    protected beforeStop(): Promise<void>;
    getFrameworkType(): MidwayFrameworkType;
    private loadMidwayController;
    private addNamespace;
    private bindSocketResponse;
    getFrameworkName(): string;
    useConnectionMiddleware(middleware: CommonMiddlewareUnion<Context, NextFunction, undefined>): void;
    getConnectionMiddleware(): ContextMiddlewareManager<Context, NextFunction, undefined>;
}
//# sourceMappingURL=framework.d.ts.map